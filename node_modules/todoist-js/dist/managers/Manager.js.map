{"version":3,"sources":["../../todoist/managers/Manager.js"],"names":["Manager","api","state","state_name","find","obj","id","obj_id","temp_id","response","only_local","object_type","get","Promise","resolve","Object","assign","uuid","generate_uuid","cmdDef","type","args","cmdArgs","queue","push","cmd"],"mappings":"mbAAMA,Q,YAEJ,aAAiB,yBACf,KAAKC,GAAL,CAAWA,CACZ,C,mEAYqC,+DAChC,EAAW,IADqB,CAcpC,MAZA,MAAKA,GAAL,CAASC,KAAT,CAAe,KAAKC,UAApB,EAAgCC,IAAhC,CAAqC,WAAS,EAExCC,EAAIC,EAAJ,GAAWC,CAAX,EAAqBF,EAAIG,OAAJ,EAAeD,CAFI,IAG1C,EAAWF,CAH+B,CAK7C,CALD,CAYA,CALKI,CAAD,EAAcC,CAAd,GAA4B,KAAKC,WAKrC,GAHE,EAAW,KAAKV,GAAL,CAAS,KAAKE,UAAd,EAA0BS,GAA1B,CAA8BL,CAA9B,CAGb,EAAOM,QAAQC,OAAR,CAAgBL,CAAhB,CACR,C,4CAQgC,iEACzB,EAAMM,OAAOC,MAAP,CACV,CACEC,KAAM,KAAKhB,GAAL,CAASiB,aAAT,EADR,CADU,CAKU,QAAlB,QAAOC,EAAP,CAA6B,CAAEC,KAAMD,CAAR,CAA7B,CAAgDA,CALxC,CAOV,CACEE,KAAMC,CADR,CAPU,CADmB,CAa/B,MADA,MAAKrB,GAAL,CAASsB,KAAT,CAAeC,IAAf,CAAoBC,CAApB,CACA,CAAOA,CACR,C,sCA9CgB,CAAE,MAAO,EAAK,C,uCACb,CAAE,MAAO,EAAK,C,yBAgDnBzB,O","file":"Manager.js","sourcesContent":["class Manager {\n\n  constructor(api) {\n    this.api = api;\n  }\n\n  // should be re-defined in a subclass\n  get state_name() { return ''; }\n  get object_type() { return ''; }\n\n  /**\n  * Finds and returns the object based on its id.\n  * @param {number} obj_id\n  * @param {boolean} only_local\n  * @return {Promise}\n  */\n  get_by_id(obj_id, only_local = false) {\n    let response = null;\n    this.api.state[this.state_name].find((obj) => {\n      // 2nd term has weak comparison for num-str match.\n      if (obj.id === obj_id || obj.temp_id == obj_id) {\n        response = obj;\n      }\n    });\n\n    if (!response && !only_local && this.object_type) {\n      // this isn't matching with Python code\n      response = this.api[this.state_name].get(obj_id);\n    }\n\n    return Promise.resolve(response);\n  }\n\n  /**\n  * Shorcut to add commands to the queue.\n  * @param {string|Object} cmdDef The definition of the command,\n  *   can be a string used as type or an object with desired params.\n  * @param {Object} cmdArgs The arguments for the command.\n  */\n  queueCmd( cmdDef, cmdArgs = {} ) {\n    const cmd = Object.assign(\n      {\n        uuid: this.api.generate_uuid(),\n      },\n      (\n        typeof cmdDef === 'string' ? { type: cmdDef } : cmdDef\n      ),\n      {\n        args: cmdArgs,\n      }\n    );\n    this.api.queue.push(cmd);\n    return cmd;\n  }\n}\n\nexport default Manager;\n"]}