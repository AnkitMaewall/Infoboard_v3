{"version":3,"sources":["../../todoist/managers/UploadsManager.js"],"names":["UploadsManager","Object","assign","params","project_id","api","post","args","files","get","file_url"],"mappings":"ykCAEMA,e,gOAOe,CACjB,GAAM,GAAOC,OAAOC,MAAP,IAAmBC,CAAnB,CAA2B,CAAEC,qBAAF,CAA3B,CAAb,CAGA,MAAO,MAAKC,GAAL,CAASC,IAAT,CAAc,aAAd,CAA6BC,CAA7B,CAAmCC,CAAnC,CACR,C,kCASW,CACV,MAAO,MAAKH,GAAL,CAASI,GAAT,CAAa,aAAb,CAA4BN,CAA5B,CACR,C,yCAOgB,CACf,MAAO,MAAKE,GAAL,CAASI,GAAT,CAAa,gBAAb,CAA+B,CAAEC,UAAF,CAA/B,CACR,C,0CAGYV,c","file":"UploadsManager.js","sourcesContent":["import Manager from './Manager';\n\nclass UploadsManager extends Manager {\n  /**\n  * Uploads a file. (NOT TESTED).\n  * @param {???} file File to upload.\n  * @param {Object} params\n  * @return {Promise}\n  */\n  add(files, params) {\n    const args = Object.assign( {}, params, { project_id });\n    // should get a file, maybe file should be a file handler\n    // @TODO make API.post to manage files\n    return this.api.post('uploads/add', args, files);\n  }\n\n  /**\n  * Returns all user's uploads.\n  * @param {Object} params\n  *   limit: (int, optional) number of results (1-50)\n  *   last_id: (int, optional) return results with id<last_id\n  * @return {Promise}\n  */\n  get(params) {\n    return this.api.get('uploads/get', params);\n  }\n\n  /**\n  * Deletes upload.\n  * @param {string} file_url Uploaded file URL\n  * @return {Promise}\n  */\n  delete(file_url) {\n    return this.api.get('uploads/delete', { file_url });\n  }\n}\n\nexport default UploadsManager;\n"]}