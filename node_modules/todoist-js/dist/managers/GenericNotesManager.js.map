{"version":3,"sources":["../../todoist/managers/GenericNotesManager.js"],"names":["GenericNotesManager","Object","assign","params","id","note_id","queueCmd","args","get_by_id","then","n","is_deleted"],"mappings":"ykCAEMA,oB,sOASoB,CACtB,GAAM,GAAOC,OAAOC,MAAP,IAAkBC,CAAlB,CAA0B,CAAEC,GAAIC,CAAN,CAA1B,CAAb,CACA,KAAKC,QAAL,CAAc,aAAd,CAA6BC,CAA7B,CACD,C,yCAMe,CACd,KAAKD,QAAL,CAAc,aAAd,CAA6B,CAAEF,GAAIC,CAAN,CAA7B,CADc,CAEd,KAAKG,SAAL,CAAeH,CAAf,KAA8BI,IAA9B,CAAmC,WAAK,CAClCC,CADkC,GAEpCA,EAAEC,UAAF,CAAe,CAFqB,CAIvC,CAJD,CAKD,C,uCAvBiB,CAAE,MAAO,MAAS,C,0CA0BvBX,mB","file":"GenericNotesManager.js","sourcesContent":["import Manager from './Manager';\n\nclass GenericNotesManager extends Manager {\n\n  get object_type() { return 'note'; }\n\n  /**\n  * Updates an note remotely.\n  * @param {number} note_id\n  * @param {Object} params\n  */\n  update(note_id, params) {\n    const args = Object.assign({}, params, { id: note_id });\n    this.queueCmd('note_update', args);\n  }\n\n  /**\n  * Deletes an note remotely.\n  * @param {number} note_id\n  */\n  delete(note_id) {\n    this.queueCmd('note_delete', { id: note_id });\n    this.get_by_id(note_id, true).then(n => {\n      if (n) {\n        n.is_deleted = 1;\n      }\n    });\n  }\n}\n\nexport default GenericNotesManager;\n"]}