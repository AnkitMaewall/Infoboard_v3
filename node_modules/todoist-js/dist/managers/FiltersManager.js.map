{"version":3,"sources":["../../todoist/managers/FiltersManager.js"],"names":["FiltersManager","name","query","api","obj","temp_id","generate_uuid","Object","assign","data","params","state","state_name","push","id","queueCmd","type","args","filter_id","get_by_id","then","f","is_deleted","id_order_mapping","get","response","error","filters","update_state"],"mappings":"wyCAGMA,e,kOAYqB,CACvB,GAAM,GAAM,qBAAW,CAAEC,MAAF,CAAQC,OAAR,CAAX,CAA4B,KAAKC,GAAjC,CAAZ,CACAC,EAAIC,OAAJ,CAAcD,KAAY,KAAKD,GAAL,CAASG,aAAT,EAFH,CAGvBC,OAAOC,MAAP,CAAcJ,EAAIK,IAAlB,CAAwBC,CAAxB,CAHuB,CAIvB,KAAKP,GAAL,CAASQ,KAAT,CAAe,KAAKC,UAApB,EAAgCC,IAAhC,CAAqCT,CAArC,CAJuB,OAOCA,EAAIK,IAPL,KAOfK,EAPe,sCAavB,MAJA,MAAKC,QAAL,CAAc,CACZC,KAAM,YADM,CAEZX,QAASD,EAAIC,OAFD,CAAd,CAGGY,CAHH,CAIA,CAAOb,CACR,C,0CAOyB,CACxB,GAAM,GAAOG,OAAOC,MAAP,IAAkBE,CAAlB,CAA0B,CAAEI,GAAII,CAAN,CAA1B,CAAb,CACA,KAAKH,QAAL,CAAc,eAAd,CAA+BE,CAA/B,CACD,C,yCASiB,CAChB,KAAKF,QAAL,CAAc,eAAd,CAA+B,CAAED,GAAII,CAAN,CAA/B,CADgB,CAEhB,KAAKC,SAAL,CAAeD,CAAf,KAAgCE,IAAhC,CAAqC,WAAK,CACpCC,CADoC,GAEtCA,EAAEC,UAAF,CAAe,CAFuB,CAIzC,CAJD,CAKD,C,sDAM+B,CAC9B,KAAKP,QAAL,CAAc,sBAAd,CAAsC,CAAEQ,kBAAF,CAAtC,CACD,C,kCAOc,YAIb,MAAO,MAAKpB,GAAL,CAASqB,GAAT,CAAa,aAAb,CAHQ,CACbN,UAAWA,CADE,CAGR,EAAoCE,IAApC,CAAyC,WAAc,CAC5D,GAAIK,EAASC,KAAb,CACE,MAAO,KAAP,CAEF,GAAM,GAAO,CACXC,QAASF,EAASE,OAAT,CAAmB,CAACA,OAAD,CAAnB,GADE,CAAb,CAKA,MAFA,GAAKxB,GAAL,CAASyB,YAAT,CAAsBnB,CAAtB,CAEA,CAAOgB,CACR,CAVM,CAWR,C,sCAhFgB,CAAE,MAAO,SAAY,C,uCACpB,CAAE,MAAO,QAAW,C,0CAkFzBzB,c","file":"FiltersManager.js","sourcesContent":["import Manager from './Manager';\nimport Filter from './../models/Filter';\n\nclass FiltersManager extends Manager {\n\n  get state_name() { return 'filters'; }\n  get object_type() { return 'filter'; }\n\n  /**\n  * Creates a local filter object.\n  * @param {string} name\n  * @param {string} query\n  * @param {Object} params\n  * @return {Filter}\n  */\n  add(name, query, params) {\n    const obj = new Filter({ name, query }, this.api);\n    obj.temp_id = obj['id'] = this.api.generate_uuid();\n    Object.assign(obj.data, params);\n    this.api.state[this.state_name].push(obj);\n\n    // get obj data w/o id attribute\n    const { id, ...args } = obj.data;\n\n    this.queueCmd({\n      type: 'filter_add',\n      temp_id: obj.temp_id,\n    }, args);\n    return obj;\n  }\n\n  /**\n  * Updates a filter remotely.\n  * @param {number} filter_id\n  * @param {Object} params\n  */\n  update(filter_id, params) {\n    const args = Object.assign({}, params, { id: filter_id });\n    this.queueCmd('filter_update', args);\n  }\n\n  /**\n  * Deletes a filter remotely.\n  *   note: since api response isn't including deleted objects\n  *   must flag as deleted by received id.\n  * @param {number} filter_id\n  * @param {Object} params\n  */\n  delete(filter_id) {\n    this.queueCmd('filter_delete', { id: filter_id });\n    this.get_by_id(filter_id, true).then(f => {\n      if (f) {\n        f.is_deleted = 1;\n      }\n    });\n  }\n\n  /**\n  * Updates the orders of multiple filters remotely.\n  * @param {Object} id_order_mapping\n  */\n  update_orders(id_order_mapping) {\n    this.queueCmd('filter_update_orders', { id_order_mapping });\n  }\n\n  /**\n  * Gets an existing filter.\n  * @param {number} filter_id\n  * @return {Promise}\n  */\n  get(filter_id) {\n    const params = {\n      filter_id: filter_id,\n    };\n    return this.api.get('filters/get', params).then((response) => {\n      if (response.error) {\n        return null;\n      }\n      const data = {\n        filters: response.filters ? [filters] : []\n      };\n      this.api.update_state(data);\n\n      return response;\n    });\n  }\n}\n\nexport default FiltersManager;\n"]}