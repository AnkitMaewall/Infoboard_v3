{"version":3,"sources":["../../todoist/managers/UserManager.js"],"names":["UploadsManager","queueCmd","params","api","state","user","key","ret","get","is_default","id","post","email","password","then","response","token","session","accessToken","Object","assign","oauth2_token","args","full_name","notification_type","service","dont_notify"],"mappings":"ykCAEMA,e,oOAKW,CACb,KAAKC,QAAL,CAAc,aAAd,CAA6BC,CAA7B,CACD,C,oDAMoB,CACnB,KAAKD,QAAL,CAAc,cAAd,CAA8BC,CAA9B,CACD,C,iCAEoC,yHAC/B,EAAM,KAAKC,GAAL,CAASC,KAAT,CAAeC,IADU,CAMnC,MAJIC,EAIJ,GAHE,EAAMC,EAAIC,GAAJ,CAAQF,CAAR,CAAaG,CAAb,CAGR,EAAOF,CACR,C,uCAEQ,CACP,MAAO,MAAKJ,GAAL,CAASC,KAAT,CAAeC,IAAf,CAAoBK,EAC5B,C,wCAUsB,YACrB,MAAO,MAAKP,GAAL,CAASQ,IAAT,CAAc,YAAd,CAA4B,CAAEC,OAAF,CAASC,UAAT,CAA5B,EAAiDC,IAAjD,CAAsD,WAAc,CAKzE,MAJIC,GAASC,KAIb,GAHE,EAAKb,GAAL,CAASc,OAAT,CAAiBC,WAAjB,CAA+BH,EAASC,KAG1C,EAAOD,CACR,CANM,CAOR,C,kEAY8C,YACvC,EAAOI,OAAOC,MAAP,IAAkBlB,CAAlB,CAA0B,CAAEU,OAAF,CAASS,cAAT,CAA1B,CADgC,CAE7C,MAAO,MAAKlB,GAAL,CAASQ,IAAT,CAAc,wBAAd,CAAwCW,CAAxC,EAA8CR,IAA9C,CAAmD,WAAc,CAKtE,MAJIC,GAASC,KAIb,GAHE,EAAKb,GAAL,CAASc,OAAT,CAAiBC,WAAjB,CAA+BH,EAASC,KAG1C,EAAOD,CACR,CANM,CAOR,C,kDAY4C,YACrC,EAAOI,OAAOC,MAAP,IAAkBlB,CAAlB,CAA0B,CAAEU,OAAF,CAASW,WAAT,CAAoBV,UAApB,CAA1B,CAD8B,CAE3C,MAAO,MAAKV,GAAL,CAASQ,IAAT,CAAc,eAAd,CAA+BW,CAA/B,EAAqCR,IAArC,CAA0C,WAAc,CAK7D,MAJIC,GAASC,KAIb,GAHE,EAAKb,GAAL,CAASc,OAAT,CAAiBC,WAAjB,CAA+BH,EAASC,KAG1C,EAAOD,CACR,CANM,CAOR,C,sFASoE,CACnE,MAAO,MAAKZ,GAAL,CAASQ,IAAT,CAAc,kCAAd,CAAkD,CACvDa,mBADuD,CAEvDC,SAFuD,CAGvDC,aAHuD,CAAlD,CAKR,C,0CAGY1B,c","file":"UserManager.js","sourcesContent":["import Manager from './Manager';\n\nclass UploadsManager extends Manager {\n  /**\n  * Updates the user data.\n  * @param {Object} params\n  */\n  update(params) {\n    this.queueCmd('user_update', params);\n  }\n\n  /**\n  * Updates the user's karma goals.\n  * @param {Object} params\n  */\n  update_goals(params) {\n    this.queueCmd('update_goals', params);\n  }\n\n  get(key = false, is_default = false) {\n    let ret = this.api.state.user;\n    if (key) {\n      ret = ret.get(key, is_default);\n    }\n\n    return ret;\n  }\n\n  get_id() {\n    return this.api.state.user.id;\n  }\n\n  /**\n  * Logins user, and returns the response received by the server.\n  *   Note: this method was migrated from Python but is useless\n  *   for 3rd party apps.\n  * @param {string} email\n  * @param {string} password\n  * @return {Promise}\n  */\n  login(email, password) {\n    return this.api.post('user/login', { email, password }).then((response) => {\n      if (response.token) {\n        this.api.session.accessToken = response.token;\n      }\n\n      return response;\n    });\n  }\n\n  /**\n  * Logins user with Google account, and returns the response received by\n  *   the server.\n  *   Note: this method was migrated from Python but is useless\n  *   for 3rd party apps.\n  * @param {string} email\n  * @param {string} oauth2_token\n  * @param {Object} params\n  * @return {Promise}\n  */\n  login_with_google(email, oauth2_token, params) {\n    const args = Object.assign({}, params, { email, oauth2_token });\n    return this.api.post('user/login_with_google', args).then((response) => {\n      if (response.token) {\n        this.api.session.accessToken = response.token;\n      }\n\n      return response;\n    });\n  }\n\n  /**\n  * Registers a new user.\n  *   Note: this method was migrated from Python but is useless\n  *   for 3rd party apps.\n  * @param {string} email\n  * @param {string} full_name\n  * @param {string} password\n  * @param {Object} params\n  * @return {Promise}\n  */\n  register(email, full_name, password, params) {\n    const args = Object.assign({}, params, { email, full_name, password });\n    return this.api.post('user/register', args).then((response) => {\n      if (response.token) {\n        this.api.session.accessToken = response.token;\n      }\n\n      return response;\n    });\n  }\n\n  /**\n  * Updates the user's notification settings.\n  * @param {string} notification_type\n  * @param {string} service\n  * @param {boolen} dont_notify\n  * @return {Promise}\n  */\n  update_notification_setting(notification_type, service, dont_notify) {\n    return this.api.post('user/update_notification_setting', {\n      notification_type,\n      service,\n      dont_notify,\n    });\n  }\n}\n\nexport default UploadsManager;\n"]}