{"version":3,"sources":["../../todoist/managers/ProjectsManager.js"],"names":["ProjectsManager","name","api","obj","temp_id","id","generate_uuid","Object","assign","data","params","state","state_name","push","queueCmd","type","args","get_by_id","project_id","ids","project_ids","forEach","then","p","is_deleted","is_archived","ids_to_orders_indents","email","get","response","error","projects","project","project_notes","notes","update_state"],"mappings":"ylDAGMA,gB,gOAUc,CAChB,GAAM,GAAM,sBAAY,CAAEC,MAAF,CAAZ,CAAsB,KAAKC,GAA3B,CAAZ,CACAC,EAAIC,OAAJ,CAAcD,EAAIE,EAAJ,KAAa,KAAKH,GAAL,CAASI,aAAT,EAFX,CAGhBC,OAAOC,MAAP,CAAcL,EAAIM,IAAlB,CAAwBC,CAAxB,CAHgB,CAIhB,KAAKR,GAAL,CAASS,KAAT,CAAe,KAAKC,UAApB,EAAgCC,IAAhC,CAAqCV,CAArC,CAJgB,OAOQA,EAAIM,IAPZ,KAORJ,EAPQ,sCAahB,MAJA,MAAKS,QAAL,CAAc,CACZC,KAAM,aADM,CAEZX,QAASD,EAAIC,OAFD,CAAd,CAGGY,CAHH,CAIA,CAAOb,CACR,C,0CAO0B,YACzB,0CAAC,kHACmB,EAAKc,SAAL,CAAeC,CAAf,CADnB,iBAEKf,CAFL,EAGGI,OAAOC,MAAP,CAAcL,EAAIM,IAAlB,CAAwBC,CAAxB,CAHH,0CAAD,IADyB,CAQzB,GAAM,GAAOH,OAAOC,MAAP,IAAkBE,CAAlB,CAA0B,CAAEL,GAAIa,CAAN,CAA1B,CAAb,CACA,KAAKJ,QAAL,CAAc,gBAAd,CAAgCE,CAAhC,CACD,C,yCAMmB,YAClB,KAAKF,QAAL,CAAc,gBAAd,CAAgC,CAAEK,IAAKC,CAAP,CAAhC,CADkB,CAElBA,EAAYC,OAAZ,CAAoB,WAAM,CACxB,EAAKJ,SAAL,CAAeZ,CAAf,KAAyBiB,IAAzB,CAA8B,WAAK,CAC7BC,CAD6B,GAE/BA,EAAEC,UAAF,CAAe,CAFgB,CAIlC,CAJD,CAKD,CAND,CAOD,C,0CAMmB,CAClB,KAAKV,QAAL,CAAc,iBAAd,CAAiC,CAAET,GAAIa,CAAN,CAAjC,CADkB,CAElB,KAAKD,SAAL,CAAeC,CAAf,KAAiCI,IAAjC,CAAsC,WAAK,CACzCC,EAAEE,WAAF,CAAgB,CACjB,CAFD,CAGD,C,8CAMqB,CACpB,KAAKX,QAAL,CAAc,mBAAd,CAAmC,CAAET,GAAIa,CAAN,CAAnC,CACD,C,sEAO4C,CAC3C,KAAKJ,QAAL,CAAc,+BAAd,CAA+C,CAAEY,uBAAF,CAA/C,CACD,C,wCAQiC,CAChC,KAAKZ,QAAL,CAAc,eAAd,CAA+B,CAC7BI,YAD6B,CAE7BS,OAF6B,CAA/B,CAID,C,mDAMc,CACb,MAAO,MAAKzB,GAAL,CAAS0B,GAAT,CAAa,uBAAb,CACR,C,4CAOoB,CAEnB,MAAO,MAAK1B,GAAL,CAAS0B,GAAT,CAAa,mBAAb,CADQ,CAAEV,YAAF,CACR,CACR,C,kCAOe,YAEd,MAAO,MAAKhB,GAAL,CAAS0B,GAAT,CAAa,cAAb,CADQ,CAAEV,YAAF,CACR,EAAqCI,IAArC,CAA0C,WAAc,CAC7D,GAAIO,EAASC,KAAb,CACE,MAAO,KAAP,CAGF,GAAM,GAAO,CACXC,SAAUF,EAASG,OAAT,CAAmB,CAACH,EAASG,OAAV,CAAnB,GADC,CAEXC,cAAeJ,EAASK,KAAT,CAAiB,CAACL,EAASK,KAAV,CAAjB,GAFJ,CAAb,CAMA,MADA,GAAKhC,GAAL,CAASiC,YAAT,CAAsB1B,CAAtB,CACA,CAAOoB,CACR,CAZM,CAaR,C,sCAxIgB,CAAE,MAAO,UAAa,C,uCACrB,CAAE,MAAO,SAAY,C,0CA0I1B7B,e","file":"ProjectsManager.js","sourcesContent":["import Manager from './Manager';\nimport Project from './../models/Project';\n\nclass ProjectsManager extends Manager {\n  get state_name() { return 'projects'; }\n  get object_type() { return 'project'; }\n\n  /**\n  * Creates a local project object.\n  * @param {string} name\n  * @param {Object} params\n  * @return {Project}\n  */\n  add(name, params) {\n    const obj = new Project({ name }, this.api);\n    obj.temp_id = obj.id = `$${this.api.generate_uuid()}`;\n    Object.assign(obj.data, params);\n    this.api.state[this.state_name].push(obj);\n\n    // get obj data w/o id attribute\n    const { id, ...args } = obj.data;\n\n    this.queueCmd({\n      type: 'project_add',\n      temp_id: obj.temp_id,\n    }, args);\n    return obj;\n  }\n\n  /**\n  * Updates a project remotely.\n  * @param {number} project_id\n  * @param {Object} params\n  */\n  update(project_id, params) {\n    (async () => {\n      const obj = await this.get_by_id(project_id);\n      if (obj) {\n        Object.assign(obj.data, params);\n      }\n    })();\n\n    const args = Object.assign({}, params, { id: project_id });\n    this.queueCmd('project_update', args);\n  }\n\n  /**\n  * Deletes a project remotely.\n  * @param {Array.<number>} project_ids\n  */\n  delete(project_ids) {\n    this.queueCmd('project_delete', { ids: project_ids });\n    project_ids.forEach(id => {\n      this.get_by_id(id, true).then(p => {\n        if (p) {\n          p.is_deleted = 1;\n        }\n      });\n    });\n  }\n\n  /**\n  * Marks project as archived remotely.\n  * @param {number} project_id\n  */\n  archive(project_id) {\n    this.queueCmd('project_archive', { id: project_id });\n    this.get_by_id(project_id, true).then(p => {\n      p.is_archived = 1;\n    });\n  }\n\n  /**\n  * Marks project as not archived remotely.\n  * @param {number} project_id\n  */\n  unarchive(project_id) {\n    this.queueCmd('project_unarchive', { id: project_id });\n  }\n\n  /**\n  * Updates the orders and indents of multiple projects remotely.\n  * @param {Object} ids_to_orders_indents Mapping object with project ids as\n  *   keys and values with Array.<number> length 2 where 1st element is order and 2nd indent.\n  */\n  update_orders_indents(ids_to_orders_indents) {\n    this.queueCmd('project_update_orders_indents', { ids_to_orders_indents });\n  }\n\n  /**\n  * Shares a project with a user.\n  * @param {number} project_id\n  * @param {string} email\n  * @param {string} message\n  */\n  share(project_id, email, message) {\n    this.queueCmd('share_project', {\n      project_id,\n      email,\n    });\n  }\n\n  /**\n  * Returns archived projects.\n  * @return {Promise}\n  */\n  get_archived() {\n    return this.api.get('projects/get_archived');\n  }\n\n  /**\n  * Returns a project's uncompleted items.\n  * @param {number} project_id\n  * @return {Promise}\n  */\n  get_data(project_id) {\n    const params = { project_id };\n    return this.api.get('projects/get_data', params);\n  }\n\n  /**\n  * Gets an existing project.\n  * @param {number} project_id\n  * @return {Promise}\n  */\n  get(project_id) {\n    const params = { project_id };\n    return this.api.get('projects/get', params).then((response) => {\n      if (response.error) {\n        return null;\n      }\n\n      const data = {\n        projects: response.project ? [response.project] : [],\n        project_notes: response.notes ? [response.notes] : [],\n      };\n\n      this.api.update_state(data);\n      return response;\n    });\n  }\n}\n\nexport default ProjectsManager;\n"]}