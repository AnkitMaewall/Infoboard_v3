{"version":3,"sources":["../../todoist/managers/LabelsManager.js"],"names":["LabelsManager","name","api","obj","temp_id","id","generate_uuid","Object","assign","data","params","state","state_name","push","queueCmd","type","args","label_id","get_by_id","then","l","is_deleted","id_order_mapping","get","response","error","labels","label","update_state"],"mappings":"oyCAGMA,c,gOAWc,CAChB,GAAM,GAAM,oBAAU,CAAEC,MAAF,CAAV,CAAoB,KAAKC,GAAzB,CAAZ,CACAC,EAAIC,OAAJ,CAAcD,EAAIE,EAAJ,CAAS,KAAKH,GAAL,CAASI,aAAT,EAFP,CAGhBC,OAAOC,MAAP,CAAcL,EAAIM,IAAlB,CAAwBC,CAAxB,CAHgB,CAIhB,KAAKR,GAAL,CAASS,KAAT,CAAe,KAAKC,UAApB,EAAgCC,IAAhC,CAAqCV,CAArC,CAJgB,OAOQA,EAAIM,IAPZ,KAORJ,EAPQ,sCAchB,MALA,MAAKS,QAAL,CAAc,CACZC,KAAM,WADM,CAEZX,QAASD,EAAIC,OAFD,CAAd,CAGGY,CAHH,CAKA,CAAOb,CACR,C,0CAOwB,CACvB,GAAM,GAAOI,OAAOC,MAAP,IAAkBE,CAAlB,CAA0B,CAAEL,GAAIY,CAAN,CAA1B,CAAb,CACA,KAAKH,QAAL,CAAc,cAAd,CAA8BE,CAA9B,CACD,C,yCAMgB,CACf,KAAKF,QAAL,CAAc,cAAd,CAA8B,CAAET,GAAIY,CAAN,CAA9B,CADe,CAEf,KAAKC,SAAL,CAAeD,CAAf,KAA+BE,IAA/B,CAAoC,WAAK,CACnCC,CADmC,GAErCA,EAAEC,UAAF,CAAe,CAFsB,CAIxC,CAJD,CAKD,C,sDAO+B,CAC9B,KAAKP,QAAL,CAAc,qBAAd,CAAqC,CAAEQ,kBAAF,CAArC,CACD,C,kCAOa,YAEZ,MAAO,MAAKpB,GAAL,CAASqB,GAAT,CAAa,YAAb,CADQ,CAAEN,UAAF,CACR,EAAmCE,IAAnC,CAAwC,WAAc,CAC3D,GAAIK,EAASC,KAAb,CACE,MAAO,KAAP,CAEF,GAAM,GAAO,CACXC,OAAQF,EAASG,KAAT,CAAiB,CAACH,EAASG,KAAV,CAAjB,GADG,CAAb,CAKA,MADA,GAAKzB,GAAL,CAAS0B,YAAT,CAAsBnB,CAAtB,CACA,CAAOe,CACR,CAVM,CAWR,C,sCA5EgB,CAAE,MAAO,QAAW,C,uCACnB,CAAE,MAAO,OAAU,C,0CA8ExBxB,a","file":"LabelsManager.js","sourcesContent":["import Manager from './Manager';\nimport Label from './../models/Label';\n\nclass LabelsManager extends Manager {\n\n  get state_name() { return 'labels'; }\n  get object_type() { return 'label'; }\n\n  /**\n  * Creates a local label object.\n  * @param {string} name\n  * @param {Object} params\n  * @return {Label}\n  */\n  add(name, params) {\n    const obj = new Label({ name }, this.api);\n    obj.temp_id = obj.id = this.api.generate_uuid();\n    Object.assign(obj.data, params);\n    this.api.state[this.state_name].push(obj);\n\n    // get obj data w/o id attribute\n    const { id, ...args } = obj.data;\n\n    this.queueCmd({\n      type: 'label_add',\n      temp_id: obj.temp_id,\n    }, args);\n\n    return obj;\n  }\n\n  /**\n  * Updates a label remotely.\n  * @param {number} label_id\n  * @param {Objec} params\n  */\n  update(label_id, params) {\n    const args = Object.assign({}, params, { id: label_id });\n    this.queueCmd('label_update', args);\n  }\n\n  /**\n  * Deletes a label remotely.\n  * @param {number} label_id\n  */\n  delete(label_id) {\n    this.queueCmd('label_delete', { id: label_id });\n    this.get_by_id(label_id, true).then(l => {\n      if (l) {\n        l.is_deleted = 1;\n      }\n    });\n  }\n\n  /**\n  * Updates the orders of multiple labels remotely.\n  * @param {Objec} id_order_mapping Mapping object with label ids\n  *   as keys and Array.<number> as order.\n  */\n  update_orders(id_order_mapping) {\n    this.queueCmd('label_update_orders', { id_order_mapping });\n  }\n\n  /**\n  * Gets an existing label.\n  * @param {number} label_id\n  * @return {Promise}\n  */\n  get(label_id) {\n    const params = { label_id };\n    return this.api.get('labels/get', params).then((response) => {\n      if (response.error) {\n        return null;\n      }\n      const data = {\n        labels: response.label ? [response.label] : [],\n      };\n\n      this.api.update_state(data);\n      return response;\n    });\n  }\n}\n\nexport default LabelsManager;\n"]}