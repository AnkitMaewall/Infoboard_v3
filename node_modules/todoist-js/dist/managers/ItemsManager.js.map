{"version":3,"sources":["../../todoist/managers/ItemsManager.js"],"names":["ItemsManager","content","project_id","api","obj","temp_id","id","generate_uuid","Object","assign","data","params","state","state_name","push","queueCmd","type","args","item_id","ids","item_ids","forEach","get_by_id","then","i","is_deleted","project_items","to_project","force_history","update_item_orders","restore_state","new_date_utc","date_string","isNaN","is_forward","ids_to_orders_indents","ids_to_orders","get","response","error","projects","project","items","item","notes","note","update_state"],"mappings":"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","file":"ItemsManager.js","sourcesContent":["import Manager from './Manager';\nimport Item from './../models/Item';\n\nclass ItemsManager extends Manager {\n\n  get state_name() { return 'items'; }\n  get object_type() { return 'item'; }\n\n  /**\n  * Creates a local item object.\n  * @param {string} content\n  * @param {number} project_id\n  * @param {Object} params\n  * @return {Item}\n  */\n  add(content, project_id, params) {\n    const obj = new Item({ content, project_id }, this.api);\n    obj.temp_id = obj.id = this.api.generate_uuid();\n    Object.assign(obj.data, params);\n    this.api.state[this.state_name].push(obj);\n\n    // get obj data w/o id attribute\n    const { id, ...args } = obj.data;\n\n    this.queueCmd({\n      type: 'item_add',\n      temp_id: obj.temp_id,\n    }, args);\n    return obj;\n  }\n\n  /**\n  * Updates an item remotely.\n  * @param {number} item_id\n  * @param {Object} params\n  */\n  update(item_id, params) {\n    const args = Object.assign( {}, params, { id: item_id });\n    this.queueCmd('item_update', args);\n  }\n\n  /**\n  * Deletes items remotely.\n  * @param {Array.<number>} item_ids\n  */\n  delete(item_ids) {\n    this.queueCmd('item_delete', { ids: item_ids });\n    item_ids.forEach(id => {\n      this.get_by_id(id, true).then(i => {\n        if (i) {\n          i.is_deleted = 1;\n        }\n      });\n    });\n  }\n\n  /**\n  * Moves items to another project remotely.\n  * @param {Object} project_items Mapping object with project\n  *   ids as keys and Array.<number> as list of item ids.\n  * @param {number} to_project Destination project id.\n  */\n  move(project_items, to_project) {\n    this.queueCmd('item_move', {\n      project_items,\n      to_project,\n    });\n  }\n\n  /**\n  * Marks item as done.\n  * @param {number} item_id\n  */\n  close(item_id) {\n    this.queueCmd('item_close', { id: item_id });\n  }\n\n  /**\n  * Marks items as completed remotely.\n  * @param {Array.<number>} item_ids\n  * @param {boolean} force_history\n  */\n  complete(item_ids, force_history) {\n    this.queueCmd('item_complete', {\n      ids: item_ids,\n      force_history,\n    });\n  }\n\n  /**\n  * Marks items as not completed remotely.\n  * @param {Array.<number>} item_ids\n  * @param {boolean} update_item_orders\n  * @param {boolean} restore_state\n  */\n  uncomplete(item_ids, update_item_orders, restore_state) {\n    const args = {\n      ids: item_ids,\n      update_item_orders,\n    };\n\n    if (restore_state) {\n      args['restore_state'] = restore_state;\n    }\n\n    this.queueCmd('item_uncomplete', args);\n  }\n\n  /**\n  * Completes a recurring task remotely.\n  * @param {number} item_id\n  * @param {string} new_date_utc\n  * @param {string} date_string\n  * @param {boolean} is_forward\n  */\n  update_date_complete(item_id, new_date_utc, date_string, is_forward) {\n    const args = {\n      'id': item_id,\n    };\n\n    if (new_date_utc) {\n      args.new_date_utc = new_date_utc;\n    }\n\n    if (date_string) {\n      args.date_string = date_string;\n    }\n\n    if (!isNaN(is_forward)) {\n      args.is_forward = is_forward;\n    }\n\n    this.queueCmd('item_update_date_complete', args);\n  }\n\n  /**\n  * Updates the order and indents of multiple items remotely.\n  * @param {object} ids_to_orders_indents Mapping object with item ids as\n  *   keys and values with Array.<number> length 2 where 1st element is order and 2nd indent.\n  */\n  update_orders_indents(ids_to_orders_indents) {\n    this.queueCmd('item_update_orders_indents', { ids_to_orders_indents });\n  }\n\n  /**\n  * Updates in the local state the day orders of multiple items remotely.\n  * @param {object} ids_to_orders Mapping object with item ids as keys\n  *   and number values for order.\n  */\n  update_day_orders(ids_to_orders) {\n    this.queueCmd('item_update_day_orders', { ids_to_orders });\n  }\n\n  /**\n  * Returns a project's completed items.\n  * @param {number} project_id\n  * @param {Object} params\n  * @return {Promise}\n  */\n  get_completed(project_id, params) {\n    const args = Object.assign({}, params, { project_id });\n    return this.api.get('items/get_completed', args);\n  }\n\n  /**\n  * Gets an existing item.\n  * @param {number} item_id\n  * @return {Promise}\n  */\n  get(item_id) {\n    const args = { item_id };\n    return this.api.get('items/get', args).then((response) => {\n      if (response.error) {\n        return null;\n      }\n      const data = {\n        projects: response.project ? [response.project] : [],\n        items: response.item ? [response.item] : [],\n        // @TODO check how to assign notes here\n        notes: response.note ? [...response.notes] :[],\n      };\n      this.api.update_state(data);\n\n      return response;\n    });\n\n  }\n}\n\nexport default ItemsManager;\n"]}