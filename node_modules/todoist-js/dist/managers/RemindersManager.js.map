{"version":3,"sources":["../../todoist/managers/RemindersManager.js"],"names":["RemindersManager","item_id","api","obj","temp_id","id","generate_uuid","Object","assign","data","params","state","state_name","push","queueCmd","type","args","reminder_id","get_by_id","then","r","is_deleted","get","response","error","reminders","reminder","update_state"],"mappings":"gzCAGMA,iB,gOAWiB,CACnB,GAAM,GAAM,uBAAa,CAAEC,SAAF,CAAb,CAA0B,KAAKC,GAA/B,CAAZ,CACAC,EAAIC,OAAJ,CAAcD,EAAIE,EAAJ,CAAS,KAAKH,GAAL,CAASI,aAAT,EAFJ,CAGnBC,OAAOC,MAAP,CAAcL,EAAIM,IAAlB,CAAwBC,CAAxB,CAHmB,CAInB,KAAKR,GAAL,CAASS,KAAT,CAAe,KAAKC,UAApB,EAAgCC,IAAhC,CAAqCV,CAArC,CAJmB,OAOKA,EAAIM,IAPT,KAOXJ,EAPW,sCAcnB,MALA,MAAKS,QAAL,CAAc,CACZC,KAAM,cADM,CAEZX,QAASD,EAAIC,OAFD,CAAd,CAGGY,CAHH,CAKA,CAAOb,CACR,C,0CAO2B,CAC1B,GAAM,GAAOI,OAAOC,MAAP,IAAmBE,CAAnB,CAA2B,CAAEL,GAAIY,CAAN,CAA3B,CAAb,CACA,KAAKH,QAAL,CAAc,iBAAd,CAAiCE,CAAjC,CACD,C,yCAMmB,CAClB,KAAKF,QAAL,CAAc,iBAAd,CAAiC,CAAET,GAAIY,CAAN,CAAjC,CADkB,CAElB,KAAKC,SAAL,CAAeD,CAAf,KAAkCE,IAAlC,CAAuC,WAAK,CACtCC,CADsC,GAExCA,EAAEC,UAAF,CAAe,CAFyB,CAI3C,CAJD,CAKD,C,kCAOgB,YAEf,MAAO,MAAKnB,GAAL,CAASoB,GAAT,CAAa,eAAb,CADM,CAAEL,aAAF,CACN,EAAoCE,IAApC,CAAyC,WAAc,CAC5D,GAAII,EAASC,KAAb,CACE,MAAO,KAAP,CAEF,GAAM,GAAO,CACXC,UAAWF,EAASG,QAAT,CAAoB,CAACH,EAASG,QAAV,CAApB,GADA,CAAb,CAKA,MAFA,GAAKxB,GAAL,CAASyB,YAAT,CAAsBlB,CAAtB,CAEA,CAAOc,CACR,CAVM,CAWR,C,sCAnEgB,CAAE,MAAO,WAAc,C,uCACtB,CAAE,MAAO,UAAa,C,0CAqE3BvB,gB","file":"RemindersManager.js","sourcesContent":["import Manager from './Manager';\nimport Reminder from './../models/Reminder';\n\nclass RemindersManager extends Manager {\n\n  get state_name() { return 'reminders'; }\n  get object_type() { return 'reminder'; }\n\n  /**\n  * Creates a local reminder object.\n  * @param {number} item_id\n  * @param {Object} params\n  * @return {Reminder}\n  */\n  add(item_id, params) {\n    const obj = new Reminder({ item_id }, this.api);\n    obj.temp_id = obj.id = this.api.generate_uuid();\n    Object.assign(obj.data, params);\n    this.api.state[this.state_name].push(obj);\n\n    // get obj data w/o id attribute\n    const { id, ...args } = obj.data;\n\n    this.queueCmd({\n      type: 'reminder_add',\n      temp_id: obj.temp_id,\n    }, args);\n\n    return obj;\n  }\n\n  /**\n  * Updates a reminder remotely.\n  * @param {number} reminder_id\n  * @param {Object} params\n  */\n  update(reminder_id, params) {\n    const args = Object.assign( {}, params, { id: reminder_id });\n    this.queueCmd('reminder_update', args);\n  }\n\n  /**\n  * Deletes a reminder remotely.\n  * @param {number} reminder_id\n  */\n  delete(reminder_id) {\n    this.queueCmd('reminder_delete', { id: reminder_id });\n    this.get_by_id(reminder_id, true).then(r => {\n      if (r) {\n        r.is_deleted = 1;\n      }\n    });\n  }\n\n  /**\n  * Gets an existing reminder.\n  * @param {number} reminder_id\n  * @return {Promise}\n  */\n  get(reminder_id) {\n    const args = { reminder_id };\n    return this.api.get('reminders/get', args).then((response) => {\n      if (response.error) {\n        return null;\n      }\n      const data = {\n        reminders: response.reminder ? [response.reminder] : [],\n      };\n      this.api.update_state(data);\n\n      return response;\n    });\n  }\n}\n\nexport default RemindersManager;\n"]}