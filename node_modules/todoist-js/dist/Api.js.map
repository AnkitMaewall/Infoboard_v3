{"version":3,"sources":["../todoist/Api.js"],"names":["require","API","api_endpoint","session","token","queue","temp_ids","projects","project_notes","items","labels","filters","notes","live_notifications","reminders","locations","invitations","biz_invitations","user","collaborators","collaborator_states","completed","uploads","activity","business_users","templates","backups","state","day_orders","day_orders_timestamp","live_notifications_last_read_id","settings_notifications","get","get_api_url","resource","params","post","headers","include_notification_settings","resource_types","JSON","stringify","commands","Object","keys","response","temp_id_mapping","length","temp_keys","forEach","temp_id","new_id","replace_temp_id","update_state","queries","map","syncdata","key","collaborator","resp_models_mapping","datatype","Promise","resolve","then","find_object","remoteObj","localObj","assign","data","push","newobj","promises","typePromises","all","filter","is_deleted","get_by_id","obj","id","get_by_ids","project_id","user_id","type","objIndex","content","sync","sync_status","raise_on_error","Error"],"mappings":"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","file":"Api.js","sourcesContent":["/**\n* @fileoverview Implements the API that makes it possible to interact with a Todoist user\n*   account and its data.\n* @author Cosmitar (JS Version)\n*/\nimport Session from './Session';\n// managers\nimport ActivityManager from './managers/ActivityManager';\nimport BackupsManager from './managers/BackupsManager';\nimport BizInvitationsManager from './managers/BizInvitationsManager';\nimport BusinessUsersManager from './managers/BusinessUsersManager';\nimport CollaboratorsManager from './managers/CollaboratorsManager';\nimport CollaboratorStatesManager from './managers/CollaboratorStatesManager';\nimport CompletedManager from './managers/CompletedManager';\nimport FiltersManager from './managers/FiltersManager';\nimport InvitationsManager from './managers/InvitationsManager';\nimport ItemsManager from './managers/ItemsManager';\nimport LabelsManager from './managers/LabelsManager';\nimport LiveNotificationsManager from './managers/LiveNotificationsManager';\nimport LocationsManager from './managers/LocationsManager';\nimport NotesManager from './managers/NotesManager';\nimport ProjectNotesManager from './managers/ProjectNotesManager';\nimport ProjectsManager from './managers/ProjectsManager';\nimport RemindersManager from './managers/RemindersManager';\nimport TemplatesManager from './managers/TemplatesManager';\nimport UploadsManager from './managers/UploadsManager';\nimport UserManager from './managers/UserManager';\n// models\nimport Collaborator from './models/Collaborator';\nimport CollaboratorState from './models/CollaboratorState';\nimport Filter from './models/Filter';\nimport Item from './models/Item';\nimport Label from './models/Label';\nimport LiveNotification from './models/LiveNotification';\nimport Note from './models/Note';\nimport Project from './models/Project';\nimport ProjectNote from './models/ProjectNote';\nimport Reminder from './models/Reminder';\n\nimport { generate_uuid } from './utils/uuid';\n\nrequire(\"babel-polyfill\");\n/**\n* @class Session\n*/\nclass API {\n  constructor(token) {\n    this.api_endpoint = 'https://todoist.com';\n    // Session instance for requests\n    this.session = new Session({ token });\n    // Requests to be sent are appended here\n    this.queue = [];\n    // Mapping of temporary ids to real ids\n    this.temp_ids = {};\n\n    // managers\n    this.projects = new ProjectsManager(this);\n    this.project_notes = new ProjectNotesManager(this);\n    this.items = new ItemsManager(this);\n    this.labels = new LabelsManager(this);\n    this.filters = new FiltersManager(this);\n    this.notes = new NotesManager(this);\n    this.live_notifications = new LiveNotificationsManager(this);\n    this.reminders = new RemindersManager(this);\n    this.locations = new LocationsManager(this);\n    this.invitations = new InvitationsManager(this);\n    this.biz_invitations = new BizInvitationsManager(this);\n    this.user = new UserManager(this);\n    this.collaborators = new CollaboratorsManager(this);\n    this.collaborator_states = new CollaboratorStatesManager(this);\n    this.completed = new CompletedManager(this);\n    this.uploads = new UploadsManager(this);\n    this.activity = new ActivityManager(this);\n    this.business_users = new BusinessUsersManager(this);\n    this.templates = new TemplatesManager(this);\n    this.backups = new BackupsManager(this);\n    // Local copy of all of the user's objects\n    this.state = {\n      collaborator_states: [],\n      collaborators: [],\n      day_orders: {},\n      day_orders_timestamp: '',\n      filters: [],\n      items: [],\n      labels: [],\n      live_notifications: [],\n      live_notifications_last_read_id: -1,\n      locations: [],\n      notes: [],\n      project_notes: [],\n      projects: [],\n      reminders: [],\n      settings_notifications: {},\n      user: {},\n    };\n  }\n\n  /**\n  * Performs a GET request prepending the API endpoint.\n  * @param {string} resource Requested resource\n  * @param {Object} params\n  * @return {Promise}\n  */\n  get(resource, params) {\n    return this.session.get(\n      this.get_api_url(resource),\n      params\n    );\n  }\n\n  /**\n  * Performs a POST request prepending the API endpoint.\n  * @param {string} resource Requested resource\n  * @param {Object} params\n  * @return {Promise}\n  */\n  post(resource, params, headers) {\n    return this.session.post(\n      this.get_api_url(resource),\n      params,\n      headers\n    );\n  }\n\n  /**\n  * Sends to the server the changes that were made locally, and also\n  *   fetches the latest updated data from the server.\n  * @param {Array.<object>} commands List of commands to be processed.\n  * @param {Object} params\n  * @return {Object} Server response\n  */\n  async sync(commands = []) {\n    const response = await this.session.get(\n      this.get_api_url('sync'),\n      {\n        day_orders_timestamp: this.state.day_orders_timestamp,\n        include_notification_settings: 1,\n        resource_types: JSON.stringify(['all']),\n        commands: JSON.stringify(commands),\n      }\n    );\n\n    const temp_keys = Object.keys(response.temp_id_mapping || {});\n    if (temp_keys.length > 0) {\n      temp_keys.forEach((temp_id) => {\n        const new_id = response.temp_id_mapping[temp_id];\n        this.temp_ids[temp_id] = new_id;\n        this.replace_temp_id(temp_id, new_id);\n      });\n    }\n    await this.update_state(response);\n\n    return response;\n  }\n\n  /**\n  * Performs a server query\n  * @param {Array.<Object>} params List of parameters to query\n  * @return {Promise}\n  */\n  query(params = []) {\n    return this.session.get(\n      this.get_api_url('query'),\n      { queries: JSON.stringify(params) }\n    );\n  }\n\n  /**\n  * Updates the local state, with the data returned by the server after a\n  *   sync.\n  * @param {Object} syncdata Data returned by {@code this.sync}.\n  */\n  async update_state(syncdata) {\n    // It is straightforward to update these type of data, since it is\n    // enough to just see if they are present in the sync data, and then\n    // either replace the local values or update them.\n    const keys = ['day_orders', 'day_orders_timestamp', 'live_notifications_last_read_id', 'locations', 'settings_notifications', 'user'];\n    keys.map((key) => {\n      if (syncdata[key]) {\n        this.state[key] = syncdata[key];\n      }\n    });\n\n    const resp_models_mapping = {\n      collaborator: Collaborator,\n      collaborator_states: CollaboratorState,\n      filters: Filter,\n      items: Item,\n      labels: Label,\n      live_notifications: LiveNotification,\n      notes: Note,\n      project_notes: ProjectNote,\n      projects: Project,\n      reminders: Reminder,\n    };\n\n    // Updating these type of data is a bit more complicated, since it is\n    // necessary to find out whether an object in the sync data is new,\n    // updates an existing object, or marks an object to be deleted.  But\n    // the same procedure takes place for each of these types of data.\n    let promises = [];\n    Object.keys(resp_models_mapping).forEach((datatype) => {\n      // Process each object of this specific type in the sync data.\n      // Collect a promise for each object due to some this.find_object are asynchronous\n      // since they hit the server looking for remote objects\n      const typePromises = (syncdata[datatype] || []).map((remoteObj) => {\n        return Promise.resolve().then(async() => {\n          // Find out whether the object already exists in the local state.\n          const localObj = await this.find_object(datatype, remoteObj);\n          if (localObj) {\n            // If the object is already present in the local state, then\n            // we either update it\n              Object.assign(localObj.data, remoteObj);\n          } else {\n            // If not, then the object is new and it should be added\n              const newobj = new resp_models_mapping[datatype](remoteObj, this);\n              this.state[datatype].push(newobj);\n          }\n        });\n      });\n\n      promises = [...promises, ...typePromises];\n    });\n    // await for all promises to resolve and continue.\n    await Promise.all(promises);\n\n    // since sync response isn't including deleted objects, we'll rid of from state\n    // all those items marked as to be deleted\n    Object.keys(resp_models_mapping).forEach((datatype) => {\n      if (this.state[datatype]) {\n        this.state[datatype] = this.state[datatype].filter(stateObj => stateObj.is_deleted !== 1);\n      }\n    });\n  }\n\n  /**\n  * Searches for an object in the local state, depending on the type of object, and then on its primary key is.\n  *   If the object is found it is returned, and if not, then null is returned.\n  * @param {string} objtype Name for the type of the searching object.\n  * @param {Object} obj Object from where to take search paramters.\n  * @return {Object|null} Depending on search result.\n  */\n  find_object(objtype, obj) {\n    if (objtype === 'collaborators') {\n      return this.collaborators.get_by_id(obj.id);\n    } else if (objtype === 'collaborator_states') {\n      return this.collaborator_states.get_by_ids(obj.project_id, obj.user_id);\n    } else if (objtype === 'filters') {\n      return this.filters.get_by_id(obj.id, true);\n    } else if (objtype === 'items') {\n      return this.items.get_by_id(obj.id, true);\n    } else if (objtype === 'labels') {\n      return this.labels.get_by_id(obj.id, true);\n    } else if (objtype === 'live_notifications') {\n      return this.live_notifications.get_by_id(obj.id);\n    } else if (objtype === 'notes') {\n      return this.notes.get_by_id(obj.id, true);\n    } else if (objtype === 'project_notes') {\n      return this.project_notes.get_by_id(obj.id, true);\n    } else if (objtype === 'projects') {\n      return this.projects.get_by_id(obj.id, true);\n    } else if (objtype === 'reminders') {\n      return this.reminders.get_by_id(obj.id, true);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n  * Replaces the temporary id generated locally when an object was first\n  *   created, with a real Id supplied by the server. True is returned if\n  *   the temporary id was found and replaced, and false otherwise.\n  * @param {string} temp_id Temporary item id.\n  * @param {number} new_id New item id.\n  * @return {boolean} Whether temporary id was found or not.\n  */\n  replace_temp_id(temp_id, new_id) {\n    const datatypes = ['filters', 'items', 'labels', 'notes', 'project_notes', 'projects', 'reminders'];\n    datatypes.forEach((type) => {\n      this.state[type].forEach((obj, objIndex) => {\n        if (obj.temp_id === temp_id) {\n          this.state[type][objIndex].id = new_id;\n        }\n      });\n    });\n  }\n\n  /**\n  * Generates a uuid.\n  * @return {string}\n  */\n  generate_uuid() {\n    return generate_uuid();\n  }\n\n  /**\n  * Returns the full API url to hit.\n  * @param {string} resource The API resource.\n  * @return {string}\n  */\n  get_api_url(resource = '') {\n    return `${this.api_endpoint}/API/v7/${resource}`;\n  }\n\n  /**\n  * Adds a new task.\n  * @param {string} content The description of the task.\n  * @param {Object} params All other paramters to set in the new task.\n  * @return {Promise}\n  */\n  add_item(content, params = {}) {\n    Object.assign(params, { content });\n    if (params.labels) {\n      params.labels = JSON.stringify(params.labels);\n    }\n    return this.get('add_item', params);\n  }\n\n  /**\n  * Commits all requests that are queued.  Note that, without calling this\n  * method none of the changes that are made to the objects are actually\n  * synchronized to the server, unless one of the aforementioned Sync API\n  * calls are called directly.\n  */\n  async commit(raise_on_error = true) {\n    if (!this.queue.length) return;\n\n    const response = await this.sync(this.queue);\n    this.queue = [];\n    if (response.sync_status) {\n      if (raise_on_error) {\n        Object.keys(response.sync_status).forEach((key) => {\n          if (response.sync_status[key] != 'ok') {\n            throw new Error(`sync fail (${key}, ${JSON.stringify(response.sync_status[key])})`);\n          }\n        });\n      }\n    }\n    return response;\n  }\n};\n\n\nexport default API;\n"]}