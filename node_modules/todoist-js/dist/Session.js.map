{"version":3,"sources":["../todoist/Session.js"],"names":["Session","_app_token","config","app_token","_client","client_id","_scope","scope","_state","state","_secret","client_secret","_token","token","_sync_token","_auth_url","_exchange_token_url","_dataToQueryString","query","request","code","_code","url","data","headers","Object","keys","map","encodeURIComponent","k","join","assign","Accept","customHeaders","sync_token","fetch","method","body","test","JSON","stringify","then","response","error_code","Error","error","ok","status","statusText","get","json"],"mappings":"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","file":"Session.js","sourcesContent":["/**\n* @fileoverview Handles session related actions like configuration,\n*   requests, tokens and responses.\n* @author Cosmitar\n*/\nimport 'fetch-everywhere';\nimport { generate_uuid } from './utils/uuid';\n/**\n* @class Session\n*/\nclass Session {\n  /**\n  * @param {Object} config Configuration object with optional params:\n  *   app_token\n  *   client_id\n  *   scope\n  *   state\n  *   client_secret\n  *   token <- this is the access token\n  * @constructor\n  */\n  constructor(config = {}) {\n    this._app_token = config.app_token || '';\n    this._client = config.client_id || '';\n    this._scope = config.scope || 'data:read_write,data:delete,project:delete';\n    this._state = config.state || generate_uuid();\n    this._secret = config.client_secret || '';\n    this._token = config.token || ''; // access token\n    this._sync_token = '*';\n    this._auth_url = 'https://todoist.com/oauth/authorize';\n    this._exchange_token_url = 'https://todoist.com/oauth/access_token';\n  }\n\n  /**\n  * Simplifies deferred config after creating an instance\n  *   of a session.\n  * @param {Object} config An object that can contain\n  *   app_token\n  *   client_id\n  *   scope\n  *   state\n  *   client_secret\n  */\n  config(config = {}) {\n    this._app_token = config.app_token || this._app_token;\n    this._client = config.client_id || this._client;\n    this._scope = config.scope || this._scope;\n    this._state = config.state || this._state;\n    this._secret = config.client_secret || this._secret;\n  }\n\n  /**\n  * Sets an access token for current session.\n  * @param {string} token\n  */\n  set accessToken(token) {\n    this._token = token;\n  }\n\n  /**\n  * Sets the authorization code needed later for access token exchange.\n  * @param {string} token\n  */\n  set code(code) {\n    this._code = code;\n  }\n\n  /**\n  * Returns the authorization url based on configurations.\n  * @return string The full authorization url.\n  */\n  requestAuthorizationUrl() {\n    const query = this._dataToQueryString({\n      client_id: this._client,\n      scope: this._scope,\n      state: this._state,\n    });\n    return `${this._auth_url}?${query}`;\n  }\n\n  /**\n  * Requests an access token to the server.\n  * @return {Promise}\n  */\n  getAccessToken() {\n    return this.request(this._exchange_token_url, 'POST', {\n      client_id: this._client,\n      client_secret: this._secret,\n      code: this._code,\n    });\n  }\n\n\n  /**\n  * Performs a GET request for the given url and parameters.\n  * @param {string} url\n  * @param {Object} data\n  * @return {Promise}\n  */\n  get(url, data = {}) {\n    return this.request(url, 'GET', data);\n  }\n\n  /**\n  * Performs a POST request for the given url and parameters.\n  * @param {string} url\n  * @param {Object} data\n  * @return {Promise}\n  */\n  post(url, data = {}, headers) {\n    return this.request(url, 'POST', data, headers);\n  }\n\n  _dataToQueryString(data) {\n    return Object.keys(data)\n      .map(k => encodeURIComponent(k) + '=' + encodeURIComponent(data[k]))\n      .join('&');\n  }\n\n  /**\n  * Executes a request, handling headers, tokens and response.\n  * @param {string} url The URL to fetch.\n  * @param {string} method An http verb, for this API only GET or POST.\n  * @param {Object} data\n  */\n  request(url, method = 'GET', data = {}, customHeaders = {}) {\n    let headers = Object.assign({}, {\n      Accept: 'application/json, text/plain, */*',\n      // content type text/plain avoid preflight request not supported\n      // by API server\n      'Content-Type': 'text/plain',\n    }, customHeaders);\n\n    if (this._token) {\n      data.token = this._token;\n    }\n\n    if (method === 'POST') {\n      data.sync_token = this._sync_token;\n    }\n\n    const query = this._dataToQueryString(data);\n    const request_url = `${url}?${query}`;\n    return fetch(request_url, {\n      method: method,\n      headers: headers,\n      body: /GET|HEAD/.test(method) ? null : JSON.stringify(data),\n    }).then(response => {\n      if (response.error_code) {\n        throw new Error(`(cod: ${response.error_code}) ${response.error}`);\n      }\n      return response;\n    }).then((response) => {\n      if (!response.ok) {\n        throw new Error(`(${response.status}) ${response.statusText}`);\n      }\n\n      return response;\n    }).then(response => {\n      if (response.sync_token) {\n        this._sync_token = response.sync_token;\n      }\n\n      // Todoist API always returns a JSON, even on error (except on templates as files)\n      if (/attachment/.test(response.headers.get('content-disposition'))) {\n        return response;\n      } else {\n        return response.json();\n      }\n    });\n  }\n}\n\nexport default Session;\n"]}